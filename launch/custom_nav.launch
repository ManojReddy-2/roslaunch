<launch>
  <!-- 🌐 Set TurtleBot3 model -->
  <arg name="model" default="burger"/>
  <env name="TURTLEBOT3_MODEL" value="$(arg model)"/>

  <!-- 🕒 Use simulation time -->
  <param name="use_sim_time" value="true"/>

  <!-- 🌍 Launch Gazebo with custom world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find com_world)/world/com.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
  </include>

  <!-- 🤖 Load custom robot URDF -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find com_world)/urdf/turtlebot3_burger.urdf.xacro'" />

  <!-- 🚀 Spawn robot in Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-urdf -param robot_description -model turtlebot3_burger"/>

  <!-- 🧠 Robot State Publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" value="30.0"/>
    <param name="broadcast_tf" value="false"/>
  </node>

  <!-- 🧭 Static Transform (map → odom) -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom"
        args="0 0 0 0 0 0 map odom"/>

  <!-- 🗺️ Map Server -->
  <node name="map_server" pkg="map_server" type="map_server"
        args="$(find com_world)/maps/com.yaml"/>

  <!-- 📍 AMCL Localization -->
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <param name="use_map_topic" value="true"/>
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="base_footprint"/>
    <param name="global_frame_id" value="map"/>
    <param name="use_sim_time" value="true"/>
  </node>

  <!-- 📌 Global Planner -->
  <node name="global_planner" pkg="com_world" type="global_planner.py" output="screen"/>

  <!-- 🧭 Kinematic Controller -->
  <node name="kinematic_controller" pkg="com_world" type="kinematic_controller.py" output="screen">
    <remap from="/cmd_vel" to="/mux_cmd_vel/input1"/>
  </node>

  <!-- 🛑 Potential Field Obstacle Avoidance -->
  <node name="potential_field" pkg="com_world" type="potential_field.py" output="screen">
    <remap from="/cmd_vel" to="/mux_cmd_vel/input2"/>
  </node>
  
  <!-- ✅ Navigator Node: Switches between Kinematic and Potential Field -->
  <node name="navigator" pkg="com_world" type="navigator.py" output="screen">
    <param name="obstacle_threshold" value="0.4"/> <!-- Obstacle detection range -->
    <param name="goal_tolerance" value="0.1"/>   
     <!-- Stop near goal -->
    <param name="switch_rate" value="10"/>         <!-- Hz -->
  </node>
  
  
  

  <!-- 🔀 CMD_VEL Multiplexer (priority switcher) -->
 <node pkg="topic_tools" type="mux" name="cmd_vel_mux" output="screen"
      args="/cmd_vel /mux_cmd_vel/input1 /mux_cmd_vel/input2" />

  <!-- 👀 RViz Visualization -->
  <node pkg="rviz" type="rviz" name="rviz"
        args="-d $(find com_world)/rviz/com_navigation.rviz">
    <param name="use_sim_time" value="true"/>
  </node>
</launch>

